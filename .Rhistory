y1 <- rnorm(10)
points(x1, y1, col = "red")
poisson
dpoisson
dpoisson
rpois
x <- rpois(100,5)
plot(x)
x <- 1:100
y <- rpois(x,5)
plot(x,y)
y <- rpois(x,25)
plot(x,y)
source('~/.active-rstudio-document')
dataFrameSubset <- data.frame(dataframe[heightsCM > 188])
dataFrameSubset <- data.frame(dataFrame[heightsCM > 188])
dataFrameSubset <- dataFrame[heightsCM > 188 ]
dataframe
dataFrame
dataFrameSubset <- dataFrame[heightsCM > 188 ]
dataFrame[heigths > 188]
dataFrame[heigthsCM > 188]
dataFrame[$heigthsCM > 188]
dataFrame[heigthsCM]
dataFrame[hasDaugther]
dataFrame(hasDaughter)
dataFrame[hasDaughter]
?subsetting dataframe
dataFrameSubset <- subset(dataFrame, heightsCM > 188)
dataFrameSubset
mean(dataFrameSubset$weightsK)
set.seed(41)
cauchyValues <- rcauchy(100)
cauchyValues
set.seed(415)
?sample
sample(cauchyValues,size=10, replace=TRUE)
pal <- colorRampPalette(c("red", "yellow", "blue"))
x <- rnorm(100)
plot(x, col = pal(100))
plot(x, col = pal(10))
getMethod()
getMethod(show)
library(kernlab)
install.packages(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
dim(spam)
data(warpbreaks)
names(warpbreaks)
aovObject2 <- aov(warpbreaks$score ~ warpbreaks$wool + warpbreaks$tensio)
warpbreaks
aovObject2 <- aov(warpbreaks$breaks ~ warpbreaks$wool + warpbreaks$tensio)
aovObject$coeff
aovObject2$coeff
summary(aovObject2)
library(glm2)
data(crabs)
install(glm2)
install.packages("glm2")
library(glm2)
data(crabs)
head crabs
head(crabs)
plot(crabs$Satellites,crabs$Width,pch=19,col="darkgrey",xlab="Satellites",ylab="Width")
plot(crabs$Satellites,crabs$Width,pch=19,col="darkgrey",xlab="Satellites",ylab="Width")
glm1 <- glm(crabs$Satellites ~ crabs$Width,family="poisson")
lines(crabs$Satellites,glm1$fitted,col="blue",lwd=3)
plot(crabs$Satellites,crabs$Width,pch=19,col="darkgrey",xlab="Satellites",ylab="Width")
glm1 <- glm(crabs$Satellites ~ crabs$Width,family="poisson")
lines(crabs$Satellites,glm1$fitted,col="blue",lwd=3)
confint(glm1)
summary(glm1)
data(quine)
lm1 = lm(log(Days + 2.5) ~.,data=quine)
install.packages("quine")
data(quine)
lm1 = lm(log(Days + 2.5) ~.,data=quine)
install.packages("quine")
data(quine)
install.packages("MASS")
install.packages("MASS")
data(quine)
library(MASS)
data(quine)
lm1 = lm(log(Days + 2.5) ~.,data=quine)
aicFormula <- step(lm1)
library(glm2)
data(crabs)
plot(crabs$Satellites,crabs$Width,pch=19,col="darkgrey",xlab="Satellites",ylab="Width")
glm1 <- glm(crabs$Width ~ crabs$Satellites,family="poisson")
warnings()
head(crabs)
glm1 <- glm(crabs$Width ~ crabs$Satellites,family="poisson")
lines(crabs$Satellites,glm1$fitted,col="blue",lwd=3)
hist(crabs$Satellites,crabs$Width, col="blue)
hist(crabs$Satellites,crabs$Width, col="blue)
hist(crabs$Satellites,crabs$Width, col="blue")
plot(crabs$Satellites,crabs$Width,pch=19,col="darkgrey",xlab="Satellites",ylab="Width")
plot(crabs$Satellites,crabs$Width,pch=19,col="darkgrey",xlab="Satellites",ylab="Width")
plot(crabs$Width,crabs$Satellites,pch=19,col="darkgrey",xlab="Satellites",ylab="Width")
glm1 <- glm(crabs$Width ~ crabs$Satellites,family="poisson")
lines(crabs$Satellites,glm1$fitted,col="blue",lwd=3)
lines(crabs$Satellites,glm1$fitted,col="blue",lwd=3)
glm1 <- glm(crabs$Width ~ crabs$Satellites,family="poisson")
lines(crabs$Satellites,glm1$fitted,col="blue",lwd=3)
warnings()
head(crabs)
crabs$W2 <- integer(crabs$Width*10)
crabs$W2 <- as.integer(crabs$Width*10)
head(crabs)
plot(crabs$W2,crabs$Satellites,pch=19,col="darkgrey",xlab="Satellites",ylab="Width")
glm1 <- glm(crabs$W2 ~ crabs$Satellites,family="poisson")
lines(crabs$Satellites,glm1$fitted,col="blue",lwd=3)
lines(crabs$W2,glm1$fitted,col="blue",lwd=3)
plot(crabs$W2,crabs$Satellites,pch=19,col="darkgrey",xlab="Satellites",ylab="Width")
glm1 <- glm(crabs$W2 ~ crabs$Satellites,family="poisson")
lines(crabs$W2,glm1$fitted,col="blue",lwd=3)
summary(glm1)
glm1 <- glm(crabs$Satellites ~ crabs$W2,family="poisson")
summary(glm1)
find.package("devtools")
install.packages("KernSmooth")
library(KernSmooth)
library(swirl)
swirl()
1:20
pi:10
15:1
?":"
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5 , 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Juan")
my_name
paste(my_name, collapse = " ")
paste("Hello", "word!", sep = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X","Y","Z"), sep = " ")
paste(1:3, c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep="-")
library(swirl)
swirl()
x<-c(44, NA, 5, NA)
x*3
y<-rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my.data == NA
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[300]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix, my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & C(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical("twins","twins")
xor(5==6, !FALSE)
ints<-sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_val<-lapply(flags,unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
viewinfo()
sapply(flags, unique)
vapply(flags, unique, numeric[1])
ok
ok()
sapply(flags, class)
vapply(flags, class, character[1])
vapply(flags, class, character(1)
vapply(flags, class, character(1)
)
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate. flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(wirl
)
library(swirl)
swirl()
ls
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
?head
head(plants,10)
tail(plants)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips <- sample(0:1,100, replacemente=TRUE, prob=c(0.3, 0.7))
flips <- sample(0:1,100, replace=TRUE, prob=c(0.3, 0.7))
flips <- sample(c(0,1),100, replace=TRUE, prob=c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob = 0.7)
flips2 <- rbinom(100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois
rpois(5, lamda=10)
rpois(5, lambda=10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M"))
t4 <- strptime(t3, "%B %d, %Y %H:%M")
?strptime
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$speed, y=cars$dist)
plot(x=cars$speed, y=cars$dist xlab = "Speed")
plot(x=cars$speed, y=cars$dist, xlab = "Speed")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars,main="My Plot")
plot(cars,subtit="My Plot Subtitle")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2
)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library(datasets)
data(iris)
?iris
head(iris)
mean(iris$Sepal.length)
mean(iris$Sepal.length, rm.na = true)
class(iris.Sepal.Length)
class(iris$Sepal.Length)
?mean
mean(iris$Sepal.length, na.rm = TRUE)
mean(iris[Sepal.length],na.rm = TRUE)
iris
head(iris)
iris[Sepal.length]
iris[,Sepal.length]
mean(spli(iris,iris$Sepal.length))
mean(split(iris,iris$Sepal.length))
mean(split(iris,iris$Sepal.Length))
mean(split(iris,iris$Sepal.Length), na.rm = TRUE)
spli(iris,iris$Sepal.Length)
split(iris,iris$Sepal.Length)
?colmeans
?colmean
?colsmean
?colsmeans
?colMeans
colMeans(iris[,"Sepal.Length"], na.rm = TRUE)
vdat <- iris[,"Sepal.Length"]
vdat
mean(vdat)
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
rowMeans(iris[, 1:4])
colMeans(iris)
library(datasets)
data(mtcars)
?mtcars
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
vx <- with(mtcars, tapply(hp, cyl, mean))
vx
vx[8] - vx[4]
class(vx)
vv <- as.Venctor(vx)
vv <- as.Vector(vx)
vv <- as.vector(vx)
vv
v[3]-v[1]
vv[3]-vv[1]
debug(ls)
ls
iris[,"Sepal.Length"]
mean(iris[,"Sepal.Length"])
head
head(iris)
s <- split(iris,iris$Species)
q
library(datasets)
data(iris)
head(iris)
s <- split(iris,iris$Species)
s
lapply(s, means)
lapply(s, function(x) colMeans(x[,"Sepal.Length"]))
summary(isis)
head(s)
lapply(s, function(x) xolMeans(x[,"s$virginica"]))
lapply(s, function(x) colMeans(x[,"s$virginica"]))
lapply(s, function(x) colMeans(x[, c("Sepal.Length")]))
lapply(s, function(x) colMeans(x[, c("Sepal.Length","Sepal.Width")]))
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
vd <- as.vector(sapply(split(mtcars$hp, mtcars$cyl), mean))
vd
v[3]-v[1]
vd[3]-vd[1]
setwd("~/COURSERA/hw2/ProgrammingAssignment2")
ls
dir
source(cachematrix.R)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(5)
makeVector(5)
?solve
makeCacheMatrix <- function(x = matrix()) {
cmat <- NULL     ## Init Matrix to use to calculate its Inverse
minv <- NULL     ## Init Inverse of the Matrix
set <- function(y) {     ## Funtion to set the new Matrix, init x, cmat and minv
x <<- y
cmat <<- y
minv <<- NULL
}
get <- function() x                                 ## get the Matrix to compute its Inverse
setinverse <- function(inverse) minv <<- inverse    ## set de Inverse to the cache value
getinverse <- function() minv                       ## get the Inverse valua from the cache variable
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
?identical
